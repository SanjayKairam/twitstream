# twitstream #

A super-simple asynchronous python library for speaking with Twitter's
[streaming API][]. Implemented basic authentication and non-authenticating
proxy support in the rudimentary HTTP client.

The idea was to make the least effort possible to get things working. All of
the standard HTTP client libraries seemed to block until the end of
transmission, making them inappropriate for use with the streaming API.

For a Twisted solution, see [twitty-twister][].

[streaming API]: http://apiwiki.twitter.com/Streaming-API-Documentation
[twitty-twister]: http://github.com/dustin/twitty-twister/blob/master/example/feed.py

## Usage ##

Twitstream is usable from the command line as a rudimentary client:

    twitstream.py -u username spritzer
    twitstream.py -u username track ftw fail
    twitstream.py -u username follow 12 13 15 16 20 87

Every usage of the streaming API requires authentication against a user
account. The methods available to the general public are `spritzer`, `track`,
and `follow`.

## follow\_faves ##

As a proof-of-concept, there's follow\_faves.py, which samples your most
recent favorites and derives a list of people to follow from that. It then
uses the [streaming API][]'s `follow` method to get all tweets to and from
those special users. Think of it as a cheap way to `#fixreplies`:

    follow_faves.py -u username --pages 5

## textori ##

A simple implementation of a tweet display roughly modeled on [twistori][].
Takes in keywords and pretty-prints a live tracking stream from the keywords 
entered. The below-listed keywords are the default setting.

    textori.py -u username love hate think believe feel wish

The code in this example is most notable for the tweet text unescaping and
parsing all accomplished in a single (lengthy) callable.

Both sample programs use [python-twitter][] to help parse tweets.

[twistori]: http://twistori.com/
[python-twitter]: http://code.google.com/p/python-twitter/
